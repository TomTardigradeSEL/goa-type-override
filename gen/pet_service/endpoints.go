// Code generated by goa v3.11.3, DO NOT EDIT.
//
// Pet Service endpoints
//
// Command:
// $ goa gen petsvc/design

package petservice

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "Pet Service" service endpoints.
type Endpoints struct {
	SendDogs    goa.Endpoint
	ReceiveDogs goa.Endpoint
	SendCat     goa.Endpoint
	ReceiveCat  goa.Endpoint
}

// SendDogsEndpointInput holds both the payload and the server stream of the
// "SendDogs" method.
type SendDogsEndpointInput struct {
	// Stream is the server stream used by the "SendDogs" method to send data.
	Stream SendDogsServerStream
}

// ReceiveDogsEndpointInput holds both the payload and the server stream of the
// "ReceiveDogs" method.
type ReceiveDogsEndpointInput struct {
	// Stream is the server stream used by the "ReceiveDogs" method to send data.
	Stream ReceiveDogsServerStream
}

// NewEndpoints wraps the methods of the "Pet Service" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		SendDogs:    NewSendDogsEndpoint(s),
		ReceiveDogs: NewReceiveDogsEndpoint(s),
		SendCat:     NewSendCatEndpoint(s),
		ReceiveCat:  NewReceiveCatEndpoint(s),
	}
}

// Use applies the given middleware to all the "Pet Service" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.SendDogs = m(e.SendDogs)
	e.ReceiveDogs = m(e.ReceiveDogs)
	e.SendCat = m(e.SendCat)
	e.ReceiveCat = m(e.ReceiveCat)
}

// NewSendDogsEndpoint returns an endpoint function that calls the method
// "SendDogs" of service "Pet Service".
func NewSendDogsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*SendDogsEndpointInput)
		return nil, s.SendDogs(ctx, ep.Stream)
	}
}

// NewReceiveDogsEndpoint returns an endpoint function that calls the method
// "ReceiveDogs" of service "Pet Service".
func NewReceiveDogsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*ReceiveDogsEndpointInput)
		return nil, s.ReceiveDogs(ctx, ep.Stream)
	}
}

// NewSendCatEndpoint returns an endpoint function that calls the method
// "SendCat" of service "Pet Service".
func NewSendCatEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CatPayload)
		return nil, s.SendCat(ctx, p)
	}
}

// NewReceiveCatEndpoint returns an endpoint function that calls the method
// "ReceiveCat" of service "Pet Service".
func NewReceiveCatEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.ReceiveCat(ctx)
	}
}
