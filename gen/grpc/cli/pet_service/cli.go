// Code generated by goa v3.11.3, DO NOT EDIT.
//
// Pet Service gRPC client CLI support package
//
// Command:
// $ goa gen petsvc/design

package cli

import (
	"flag"
	"fmt"
	"os"
	petservicec "petsvc/gen/grpc/pet_service/client"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `pet-service (send-dogs|receive-dogs|send-cat|receive-cat)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` pet-service send-dogs` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, any, error) {
	var (
		petServiceFlags = flag.NewFlagSet("pet-service", flag.ContinueOnError)

		petServiceSendDogsFlags = flag.NewFlagSet("send-dogs", flag.ExitOnError)

		petServiceReceiveDogsFlags = flag.NewFlagSet("receive-dogs", flag.ExitOnError)

		petServiceSendCatFlags       = flag.NewFlagSet("send-cat", flag.ExitOnError)
		petServiceSendCatMessageFlag = petServiceSendCatFlags.String("message", "", "")

		petServiceReceiveCatFlags = flag.NewFlagSet("receive-cat", flag.ExitOnError)
	)
	petServiceFlags.Usage = petServiceUsage
	petServiceSendDogsFlags.Usage = petServiceSendDogsUsage
	petServiceReceiveDogsFlags.Usage = petServiceReceiveDogsUsage
	petServiceSendCatFlags.Usage = petServiceSendCatUsage
	petServiceReceiveCatFlags.Usage = petServiceReceiveCatUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "pet-service":
			svcf = petServiceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "pet-service":
			switch epn {
			case "send-dogs":
				epf = petServiceSendDogsFlags

			case "receive-dogs":
				epf = petServiceReceiveDogsFlags

			case "send-cat":
				epf = petServiceSendCatFlags

			case "receive-cat":
				epf = petServiceReceiveCatFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "pet-service":
			c := petservicec.NewClient(cc, opts...)
			switch epn {
			case "send-dogs":
				endpoint = c.SendDogs()
				data = nil
			case "receive-dogs":
				endpoint = c.ReceiveDogs()
				data = nil
			case "send-cat":
				endpoint = c.SendCat()
				data, err = petservicec.BuildSendCatPayload(*petServiceSendCatMessageFlag)
			case "receive-cat":
				endpoint = c.ReceiveCat()
				data = nil
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// pet-serviceUsage displays the usage of the pet-service command and its
// subcommands.
func petServiceUsage() {
	fmt.Fprintf(os.Stderr, `Service is the Pet Service service interface.
Usage:
    %[1]s [globalflags] pet-service COMMAND [flags]

COMMAND:
    send-dogs: SendDogs implements SendDogs.
    receive-dogs: ReceiveDogs implements ReceiveDogs.
    send-cat: SendCat implements SendCat.
    receive-cat: ReceiveCat implements ReceiveCat.

Additional help:
    %[1]s pet-service COMMAND --help
`, os.Args[0])
}
func petServiceSendDogsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] pet-service send-dogs

SendDogs implements SendDogs.

Example:
    %[1]s pet-service send-dogs
`, os.Args[0])
}

func petServiceReceiveDogsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] pet-service receive-dogs

ReceiveDogs implements ReceiveDogs.

Example:
    %[1]s pet-service receive-dogs
`, os.Args[0])
}

func petServiceSendCatUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] pet-service send-cat -message JSON

SendCat implements SendCat.
    -message JSON: 

Example:
    %[1]s pet-service send-cat --message '{
      "cat": "Consequuntur doloribus quibusdam."
   }'
`, os.Args[0])
}

func petServiceReceiveCatUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] pet-service receive-cat

ReceiveCat implements ReceiveCat.

Example:
    %[1]s pet-service receive-cat
`, os.Args[0])
}
