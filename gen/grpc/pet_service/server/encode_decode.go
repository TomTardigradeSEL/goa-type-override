// Code generated by goa v3.11.3, DO NOT EDIT.
//
// Pet Service gRPC server encoders and decoders
//
// Command:
// $ goa gen petsvc/design

package server

import (
	"context"
	pet_servicepb "petsvc/gen/grpc/pet_service/pb"
	petservice "petsvc/gen/pet_service"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeSendDogsResponse encodes responses from the "Pet Service" service
// "SendDogs" endpoint.
func EncodeSendDogsResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	resp := NewProtoSendDogsResponse()
	return resp, nil
}

// EncodeReceiveDogsResponse encodes responses from the "Pet Service" service
// "ReceiveDogs" endpoint.
func EncodeReceiveDogsResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*petservice.DogPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Pet Service", "ReceiveDogs", "*petservice.DogPayload", v)
	}
	resp := NewProtoReceiveDogsResponse(result)
	return resp, nil
}

// EncodeSendCatResponse encodes responses from the "Pet Service" service
// "SendCat" endpoint.
func EncodeSendCatResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	resp := NewProtoSendCatResponse()
	return resp, nil
}

// DecodeSendCatRequest decodes requests sent to "Pet Service" service
// "SendCat" endpoint.
func DecodeSendCatRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *pet_servicepb.SendCatRequest
		ok      bool
	)
	{
		if message, ok = v.(*pet_servicepb.SendCatRequest); !ok {
			return nil, goagrpc.ErrInvalidType("Pet Service", "SendCat", "*pet_servicepb.SendCatRequest", v)
		}
	}
	var payload *petservice.CatPayload
	{
		payload = NewSendCatPayload(message)
	}
	return payload, nil
}

// EncodeReceiveCatResponse encodes responses from the "Pet Service" service
// "ReceiveCat" endpoint.
func EncodeReceiveCatResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*petservice.CatPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Pet Service", "ReceiveCat", "*petservice.CatPayload", v)
	}
	resp := NewProtoReceiveCatResponse(result)
	return resp, nil
}
