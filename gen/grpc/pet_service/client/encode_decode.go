// Code generated by goa v3.11.3, DO NOT EDIT.
//
// Pet Service gRPC client encoders and decoders
//
// Command:
// $ goa gen petsvc/design

package client

import (
	"context"
	pet_servicepb "petsvc/gen/grpc/pet_service/pb"
	petservice "petsvc/gen/pet_service"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildSendDogsFunc builds the remote method to invoke for "Pet Service"
// service "SendDogs" endpoint.
func BuildSendDogsFunc(grpccli pet_servicepb.PetServiceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.SendDogs(ctx, opts...)
		}
		return grpccli.SendDogs(ctx, opts...)
	}
}

// DecodeSendDogsResponse decodes responses from the Pet Service SendDogs
// endpoint.
func DecodeSendDogsResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	return &SendDogsClientStream{
		stream: v.(pet_servicepb.PetService_SendDogsClient),
	}, nil
}

// BuildReceiveDogsFunc builds the remote method to invoke for "Pet Service"
// service "ReceiveDogs" endpoint.
func BuildReceiveDogsFunc(grpccli pet_servicepb.PetServiceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.ReceiveDogs(ctx, reqpb.(*pet_servicepb.ReceiveDogsRequest), opts...)
		}
		return grpccli.ReceiveDogs(ctx, &pet_servicepb.ReceiveDogsRequest{}, opts...)
	}
}

// DecodeReceiveDogsResponse decodes responses from the Pet Service ReceiveDogs
// endpoint.
func DecodeReceiveDogsResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	return &ReceiveDogsClientStream{
		stream: v.(pet_servicepb.PetService_ReceiveDogsClient),
	}, nil
}

// BuildSendCatFunc builds the remote method to invoke for "Pet Service"
// service "SendCat" endpoint.
func BuildSendCatFunc(grpccli pet_servicepb.PetServiceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.SendCat(ctx, reqpb.(*pet_servicepb.SendCatRequest), opts...)
		}
		return grpccli.SendCat(ctx, &pet_servicepb.SendCatRequest{}, opts...)
	}
}

// EncodeSendCatRequest encodes requests sent to Pet Service SendCat endpoint.
func EncodeSendCatRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*petservice.CatPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Pet Service", "SendCat", "*petservice.CatPayload", v)
	}
	return NewProtoSendCatRequest(payload), nil
}

// BuildReceiveCatFunc builds the remote method to invoke for "Pet Service"
// service "ReceiveCat" endpoint.
func BuildReceiveCatFunc(grpccli pet_servicepb.PetServiceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.ReceiveCat(ctx, reqpb.(*pet_servicepb.ReceiveCatRequest), opts...)
		}
		return grpccli.ReceiveCat(ctx, &pet_servicepb.ReceiveCatRequest{}, opts...)
	}
}

// DecodeReceiveCatResponse decodes responses from the Pet Service ReceiveCat
// endpoint.
func DecodeReceiveCatResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*pet_servicepb.ReceiveCatResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Pet Service", "ReceiveCat", "*pet_servicepb.ReceiveCatResponse", v)
	}
	res := NewReceiveCatResult(message)
	return res, nil
}
