// Code generated with goa v3.11.3, DO NOT EDIT.
//
// Pet Service protocol buffer definition
//
// Command:
// $ goa gen petsvc/design

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: goadesign_goagen_pet_service.proto

package pet_servicepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PetService_SendDogs_FullMethodName    = "/pet_service.PetService/SendDogs"
	PetService_ReceiveDogs_FullMethodName = "/pet_service.PetService/ReceiveDogs"
	PetService_SendCat_FullMethodName     = "/pet_service.PetService/SendCat"
	PetService_ReceiveCat_FullMethodName  = "/pet_service.PetService/ReceiveCat"
)

// PetServiceClient is the client API for PetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PetServiceClient interface {
	// SendDogs implements SendDogs.
	SendDogs(ctx context.Context, opts ...grpc.CallOption) (PetService_SendDogsClient, error)
	// ReceiveDogs implements ReceiveDogs.
	ReceiveDogs(ctx context.Context, in *ReceiveDogsRequest, opts ...grpc.CallOption) (PetService_ReceiveDogsClient, error)
	// SendCat implements SendCat.
	SendCat(ctx context.Context, in *SendCatRequest, opts ...grpc.CallOption) (*SendCatResponse, error)
	// ReceiveCat implements ReceiveCat.
	ReceiveCat(ctx context.Context, in *ReceiveCatRequest, opts ...grpc.CallOption) (*ReceiveCatResponse, error)
}

type petServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPetServiceClient(cc grpc.ClientConnInterface) PetServiceClient {
	return &petServiceClient{cc}
}

func (c *petServiceClient) SendDogs(ctx context.Context, opts ...grpc.CallOption) (PetService_SendDogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PetService_ServiceDesc.Streams[0], PetService_SendDogs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &petServiceSendDogsClient{stream}
	return x, nil
}

type PetService_SendDogsClient interface {
	Send(*SendDogsStreamingRequest) error
	CloseAndRecv() (*SendDogsResponse, error)
	grpc.ClientStream
}

type petServiceSendDogsClient struct {
	grpc.ClientStream
}

func (x *petServiceSendDogsClient) Send(m *SendDogsStreamingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *petServiceSendDogsClient) CloseAndRecv() (*SendDogsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendDogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *petServiceClient) ReceiveDogs(ctx context.Context, in *ReceiveDogsRequest, opts ...grpc.CallOption) (PetService_ReceiveDogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PetService_ServiceDesc.Streams[1], PetService_ReceiveDogs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &petServiceReceiveDogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PetService_ReceiveDogsClient interface {
	Recv() (*ReceiveDogsResponse, error)
	grpc.ClientStream
}

type petServiceReceiveDogsClient struct {
	grpc.ClientStream
}

func (x *petServiceReceiveDogsClient) Recv() (*ReceiveDogsResponse, error) {
	m := new(ReceiveDogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *petServiceClient) SendCat(ctx context.Context, in *SendCatRequest, opts ...grpc.CallOption) (*SendCatResponse, error) {
	out := new(SendCatResponse)
	err := c.cc.Invoke(ctx, PetService_SendCat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petServiceClient) ReceiveCat(ctx context.Context, in *ReceiveCatRequest, opts ...grpc.CallOption) (*ReceiveCatResponse, error) {
	out := new(ReceiveCatResponse)
	err := c.cc.Invoke(ctx, PetService_ReceiveCat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PetServiceServer is the server API for PetService service.
// All implementations must embed UnimplementedPetServiceServer
// for forward compatibility
type PetServiceServer interface {
	// SendDogs implements SendDogs.
	SendDogs(PetService_SendDogsServer) error
	// ReceiveDogs implements ReceiveDogs.
	ReceiveDogs(*ReceiveDogsRequest, PetService_ReceiveDogsServer) error
	// SendCat implements SendCat.
	SendCat(context.Context, *SendCatRequest) (*SendCatResponse, error)
	// ReceiveCat implements ReceiveCat.
	ReceiveCat(context.Context, *ReceiveCatRequest) (*ReceiveCatResponse, error)
	mustEmbedUnimplementedPetServiceServer()
}

// UnimplementedPetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPetServiceServer struct {
}

func (UnimplementedPetServiceServer) SendDogs(PetService_SendDogsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendDogs not implemented")
}
func (UnimplementedPetServiceServer) ReceiveDogs(*ReceiveDogsRequest, PetService_ReceiveDogsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveDogs not implemented")
}
func (UnimplementedPetServiceServer) SendCat(context.Context, *SendCatRequest) (*SendCatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCat not implemented")
}
func (UnimplementedPetServiceServer) ReceiveCat(context.Context, *ReceiveCatRequest) (*ReceiveCatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveCat not implemented")
}
func (UnimplementedPetServiceServer) mustEmbedUnimplementedPetServiceServer() {}

// UnsafePetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PetServiceServer will
// result in compilation errors.
type UnsafePetServiceServer interface {
	mustEmbedUnimplementedPetServiceServer()
}

func RegisterPetServiceServer(s grpc.ServiceRegistrar, srv PetServiceServer) {
	s.RegisterService(&PetService_ServiceDesc, srv)
}

func _PetService_SendDogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PetServiceServer).SendDogs(&petServiceSendDogsServer{stream})
}

type PetService_SendDogsServer interface {
	SendAndClose(*SendDogsResponse) error
	Recv() (*SendDogsStreamingRequest, error)
	grpc.ServerStream
}

type petServiceSendDogsServer struct {
	grpc.ServerStream
}

func (x *petServiceSendDogsServer) SendAndClose(m *SendDogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *petServiceSendDogsServer) Recv() (*SendDogsStreamingRequest, error) {
	m := new(SendDogsStreamingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PetService_ReceiveDogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReceiveDogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PetServiceServer).ReceiveDogs(m, &petServiceReceiveDogsServer{stream})
}

type PetService_ReceiveDogsServer interface {
	Send(*ReceiveDogsResponse) error
	grpc.ServerStream
}

type petServiceReceiveDogsServer struct {
	grpc.ServerStream
}

func (x *petServiceReceiveDogsServer) Send(m *ReceiveDogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PetService_SendCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetServiceServer).SendCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetService_SendCat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetServiceServer).SendCat(ctx, req.(*SendCatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetService_ReceiveCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveCatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetServiceServer).ReceiveCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetService_ReceiveCat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetServiceServer).ReceiveCat(ctx, req.(*ReceiveCatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PetService_ServiceDesc is the grpc.ServiceDesc for PetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pet_service.PetService",
	HandlerType: (*PetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCat",
			Handler:    _PetService_SendCat_Handler,
		},
		{
			MethodName: "ReceiveCat",
			Handler:    _PetService_ReceiveCat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendDogs",
			Handler:       _PetService_SendDogs_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceiveDogs",
			Handler:       _PetService_ReceiveDogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "goadesign_goagen_pet_service.proto",
}
